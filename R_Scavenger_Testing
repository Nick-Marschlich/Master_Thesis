---
title: "Scavenger Testing"
author: "Nick"
date: "9/29/2021"
output: html_document
---

## Introduction

This is where we describe what we want to do in this analysis

```{r import}
library(tidyverse)
library(data.table)
library(stringr) 
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(knitr)
```

For each compound combination tested, some things always chage:
  - directory
  - plot title (depends on the compounds)
  - compound addition times (vary depending on when compound was added, not always the same exact)
  
```{r}
directory1 <- "/Volumes/arendt/Nick/Experiments/Scavenger_Testing/N-Ethylmaleimide/10min_incubation/20211028_N-Ethylmalamide_1mM_NOC-12_45uM_1"
directory2 <- ""
directory3 <- ""
final_directory <- ""

plot_title <- ""

compound_add    <- 
compound2_add   <- 
compound_add2   <- 
compound2_add2  <- 
compound_add3   <- 
compound2_add3  <- 
```


## Triplicate 1

set the working directory to each folder containing the Results Table from FIJI
must be changed with every trial



- the results table generated by FIJI will always be called "Results"
- read in the results and make a data frame out of them
- this will include all the columns (also, "Slice" including the names)

```{r, setup, include=FALSE}
knitr::opts_knit$set(root.dir = directory1)

# Windows
# setwd("Z:/Nick/Experiments/Scavenger_Testing/FINAL-DIRECTORY")
```


```{r}
results <- read.csv("Results.csv") %>%
  tibble()
```

- exclude all unnecessary data
- just include "Area"
- select all rows that contain a certain tissue
  - blue = incurrent canals --> uneven numbers
  - red = excurrent canals --> even numbers

```{r}
incurrent <- select(results, Area) 
incurrent <- incurrent[seq_len(nrow(incurrent)) %% 2 == 1, ]

excurrent <- select(results, Area) 
excurrent <- excurrent[seq_len(nrow(excurrent)) %% 2 == 0, ]
```

- adding a new column with time 
- adding it here allows to set 30s steps exactly 
- needs one random extra column (number)
- 'number' can be used to multiply with 30 to simulate 30s steps 
- remove NAs (otherwise, this could not be plotted at the end)

```{r}
incurrent_time <- mutate(incurrent,
                         Area,
                         number = seq(1, nrow(incurrent)), # dummy
                         time_s = number * 30,
                         time_min = time_s / 60,
                         time_addition = time_min - compound_add
                         ) %>% 
  na.omit(incurrent_time)

excurrent_time <- mutate(excurrent,
                         Area,
                         number = seq(1, nrow(excurrent)), # dummy
                         time_s = number * 30,
                         time_min = time_s / 60,
                         time_addition = time_min - compound_add
                         ) %>% 
  na.omit(excurrent_time)
```

- normalized data from 0-1 can mistakenly make differences in area bigger than they actually are
- therefore, use the mean of each value
- get the mean of all values --> divide each row with this mean
- use this in new column

```{r}
incurrent_norm <- mutate(incurrent_time,
         normalized = (Area / max(incurrent$Area))
         )

excurrent_norm <- mutate(excurrent_time,
         normalized = (Area / max(excurrent$Area))
         )
```

- plot normalized values against time 
- se = FALSE to have a clear line without the standard deviation in a gray surrounding
- use both incurrent and excurrent data in one plot 

geom_vline(xintercept = 0, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "red",
             size = 0.9)

```{r}
plot1 <- ggplot(NULL, mapping = aes(x = time_addition, y = normalized)) +
  geom_smooth(data = incurrent_norm, aes(color = "chocolate"), span = 0.2, se = FALSE) +
  geom_smooth(data = excurrent_norm, aes(color = "deepskyblue"), span = 0.2, se = FALSE) +
  # Plot Title and Axis Titles
  ggtitle(plot_title) + #'[ Change ]
  theme(plot.title = element_text(hjust = 0.5)) + # center the title in middle 
  xlab("Time [min]") +
  # add an interval for the x-axis
  # interval should start from the lowest value to the highest value
  # values need to be rounded 
  # otherwise, they would start e.g. at -17 and would not display "0" but "3" at (1) addition
  scale_x_continuous(breaks = seq(round_any(min(incurrent_norm$time_addition), 10),
                                  round_any(max(incurrent_norm$time_addition), 10), 
                                  by = 20)) +
  ylab("Normalized Area") +
  ylim(0, 2) +
  # Legend 
  scale_color_identity(name = "Canals", # name of the legend 
                       breaks = c("deepskyblue", "chocolate"), # 'break' gives the order of the values in the legend
                       labels = c("Excurrent", "Incurrent"), # 'labels' changes the name of the values 
                       guide = "legend") + # to get an identity scale 
  # add vertical line at the time of adding the compound1 (scavenger)
  geom_vline(xintercept = 0, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "grey25", 
             size = 0.9) +
  geom_text(aes(x = 0, label = "(1) addition", y = 2), # name the horizontal line
            colour = "grey25", 
            hjust = 1.1, # move the title to the left so it does not cover horizontal line
            text = element_text(size = 11)) +
  
  # add vertical line at the time of adding the compound2 (inhibitor)
  geom_vline(xintercept = compound2_add, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "grey25",
             size = 0.9) +
  geom_text(aes(x = compound2_add, label = "(2) addition", y = 2), # name the horizontal line
            colour = "grey25", 
            hjust = 1.1, # move the title to the left so it does not cover horizontal line
            text = element_text(size = 11)) 
  
  # save the plot as PDF and JPEG
ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Replica1.pdf",
       width = 20, 
       height = 10,
       units = "cm")

ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Replica1.jpeg",
       width = 20, 
       height = 10,
       units = "cm")
```



## Triplicate 2

```{r, setup, include=FALSE}
knitr::opts_knit$set(root.dir = directory2)

# Windows
# setwd("Z:/Nick/Experiments/Scavenger_Testing/FINAL-DIRECTORY")
```

```{r}
results2 <- read.csv("Results.csv") %>%
  tibble()
```

```{r}
incurrent2 <- select(results2, Area) 
incurrent2 <- incurrent2[seq_len(nrow(incurrent2)) %% 2 == 1, ]

excurrent2 <- select(results2, Area) 
excurrent2 <- excurrent2[seq_len(nrow(excurrent2)) %% 2 == 0, ]
```

```{r}
incurrent_norm2 <- mutate(incurrent2,
                         Area,
                         number = seq(1, nrow(incurrent2)),
                         time_s = number * 30,
                         time_min = time_s / 60,
                         time_addition = time_min - compound_add2
                         ) %>% 
  na.omit() %>% 
  mutate(normalized = (Area / max(incurrent2$Area)))

excurrent_norm2 <- mutate(excurrent2,
                         Area,
                         number = seq(1, nrow(excurrent2)),
                         time_s = number * 30,
                         time_min = time_s / 60,
                         time_addition = time_min - compound_add2
                         ) %>% 
  na.omit() %>% 
  mutate(normalized = (Area / max(excurrent2$Area)))
```

```{r}
plot2 <- ggplot(NULL, mapping = aes(x = time_addition, y = normalized)) +
  geom_smooth(data = incurrent_norm2, aes(color = "chocolate"), span = 0.2, se = FALSE) +
  geom_smooth(data = excurrent_norm2, aes(color = "deepskyblue"), span = 0.2, se = FALSE) +
  # Plot Title and Axis Titles
  ggtitle(plot_title) + #'[ Change ]
  theme(plot.title = element_text(hjust = 0.5)) + # center the title in middle 
  xlab("Time [min]") +
  scale_x_continuous(breaks = seq(round_any(min(incurrent_norm$time_addition), 10),
                                  round_any(max(incurrent_norm$time_addition), 10), 
                                  by = 20)) +
  ylab("Normalized Area") +
  ylim(0, 2) +
  # Legend 
  scale_color_identity(name = "Canals", # name of the legend 
                       breaks = c("deepskyblue", "chocolate"), # 'break' gives the order of the values in the legend
                       labels = c("Excurrent", "Incurrent"), # 'labels' changes the name of the values 
                       guide = "legend") + # to get an identity scale 
  # add vertical line at the time of adding the compound1 (scavenger)
  geom_vline(xintercept = 0, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "grey25", 
             size = 1.1) +
  geom_text(aes(x = 0, label = "(1) addition", y = 2), # name the horizontal line
            colour = "grey25", 
            hjust = 1.1, # move the title to the left so it does not cover horizontal line
            text = element_text(size = 11)) +
  
  # add vertical line at the time of adding the compound2 (inhibitor)
  geom_vline(xintercept = compound2_add2, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "grey25",
             size = 0.9) +
  geom_text(aes(x = compound2_add2, label = "(2) addition", y = 2), # name the horizontal line
            colour = "grey25", 
            hjust = 1.1, # move the title to the left so it does not cover horizontal line
            text = element_text(size = 11)) 
  
  # save the plot as PDF and JPEG
ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Replica2.pdf",
       width = 20, 
       height = 10,
       units = "cm")

ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Replica2.jpeg",
       width = 20, 
       height = 10,
       units = "cm")
```



## Triplicate 3 

```{r, setup, include=FALSE}
knitr::opts_knit$set(root.dir = directory3)

# Windows
# setwd("Z:/Nick/Experiments/Scavenger_Testing/FINAL-DIRECTORY")
```


```{r}
results3 <- read.csv("Results.csv") %>%
  tibble()
```

```{r}
incurrent3 <- select(results3, Area) 
incurrent3 <- incurrent3[seq_len(nrow(incurrent3)) %% 2 == 1, ]

excurrent3 <- select(results3, Area) 
excurrent3 <- excurrent3[seq_len(nrow(excurrent3)) %% 2 == 0, ]
```

```{r}
incurrent_norm3 <- mutate(incurrent3,
                         Area,
                         number = seq(1, nrow(incurrent3)),
                         time_s = number * 30,
                         time_min = time_s / 60,
                         time_addition = time_min - compound_add3 
                         ) %>% 
  na.omit() %>% 
  mutate(normalized = (Area / max(incurrent3$Area)))

excurrent_norm3 <- mutate(excurrent3,
                         Area,
                         number = seq(1, nrow(excurrent3)),
                         time_s = number * 30,
                         time_min = time_s / 60,
                         time_addition = time_min - compound_add3
                         ) %>% 
  na.omit() %>% 
  mutate(normalized = (Area / max(excurrent3$Area)))
```

```{r}
plot3 <- ggplot(NULL, mapping = aes(x = time_addition, y = normalized)) +
  geom_smooth(data = incurrent_norm3, aes(color = "chocolate"), span = 0.2, se = FALSE) +
  geom_smooth(data = excurrent_norm3, aes(color = "deepskyblue"), span = 0.2, se = FALSE) +
  # Plot Title and Axis Titles
  ggtitle(plot_title) + #'[ Change ]
  theme(plot.title = element_text(hjust = 0.5)) + # center the title in middle 
  xlab("Time [min]") +
  scale_x_continuous(breaks = seq(round_any(min(incurrent_norm$time_addition), 10),
                                  round_any(max(incurrent_norm$time_addition), 10), 
                                  by = 20)) +
  ylab("Normalized Area") +
  ylim(0, 2) +
  # Legend 
  scale_color_identity(name = "Canals", # name of the legend 
                       breaks = c("deepskyblue", "chocolate"), # 'break' gives the order of the values in the legend
                       labels = c("Excurrent", "Incurrent"), # 'labels' changes the name of the values 
                       guide = "legend") + # to get an identity scale 
  # add vertical line at the time of adding the compound1 (scavenger)
  geom_vline(xintercept = 0, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "grey25", 
             size = 0.9) +
  geom_text(aes(x = 0, label = "(1) addition", y = 2), # name the horizontal line
            colour = "grey25", 
            hjust = 1.1, # move the title to the left so it does not cover horizontal line
            text = element_text(size = 11)) +
  
  # add vertical line at the time of adding the compound2 (inhibitor)
  geom_vline(xintercept = compound2_add3, # min when compound was added 
             linetype = "dashed", # alternative: "dotted"
             color = "grey25",
             size = 0.9) +
  geom_text(aes(x = compound2_add3, label = "(2) addition", y = 2), # name the horizontal line
            colour = "grey25", 
            hjust = 1.1, # move the title to the left so it does not cover horizontal line
            text = element_text(size = 11)) 
  
  # save the plot as PDF and JPEG
ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Replica3.pdf",
       width = 20, 
       height = 10,
       units = "cm")

ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Replica3.jpeg",
       width = 20, 
       height = 10,
       units = "cm")
```



## Plot everyting 



```{r, setup, include=FALSE}
knitr::opts_knit$set(root.dir = final_directory)

# Windows
# setwd("Z:/Nick/Experiments/Scavenger_Testing/FINAL-DIRECTORY")

```

- make new data frame containing time + Area from all 3 triplicates
- create mean of all the triplicates
- make plot with dots for each triplicate + line for the mean 

```{r}
incurrent_triplicate <- rbind(incurrent_norm, incurrent_norm2, incurrent_norm3)
excurrent_triplicate <- rbind(excurrent_norm, excurrent_norm2, excurrent_norm3)

plot_final <- ggplot(NULL, aes(x = time_addition, y = normalized)) +
  geom_smooth(data = incurrent_triplicate, size = 2, aes(color = "chocolate4"), span = 0.2, se = FALSE) +
  stat_smooth(data = incurrent_norm, geom = 'line', alpha = 0.2, size = 1, aes(color = "chocolate"), span = 0.2, se = FALSE) +
  geom_jitter(data = incurrent_norm, shape = 15, alpha = 0.2, aes(color = "chocolate")) +
  stat_smooth(data = incurrent_norm2, geom = 'line', alpha = 0.2, size = 1, aes(color = "chocolate1"), span = 0.2, se = FALSE) +
  geom_jitter(data = incurrent_norm2, shape = 16, alpha = 0.2, aes(color = "chocolate1")) +
  stat_smooth(data = incurrent_norm3, geom = 'line', alpha = 0.2, size = 1, aes(color = "chocolate2"), span = 0.2, se = FALSE) +
  geom_jitter(data = incurrent_norm3, shape = 17, alpha = 0.2, aes(color = "chocolate2")) +
  
  geom_smooth(data = excurrent_triplicate, size = 2, aes(color = "deepskyblue4"), span = 0.2, se = FALSE) +
  stat_smooth(data = excurrent_norm, geom = 'line', alpha = 0.2, size = 1, aes(color = "deepskyblue"), span = 0.2, se = FALSE) +
  geom_jitter(data = excurrent_norm, shape= 15, alpha = 0.2, aes(color = "deepskyblue")) +
  stat_smooth(data = excurrent_norm2, geom = 'line', alpha = 0.2, size = 1, aes(color = "deepskyblue1"), span = 0.2, se = FALSE) +
  geom_jitter(data = excurrent_norm2, shape= 16, alpha = 0.2, aes(color = "deepskyblue1")) +
  stat_smooth(data = excurrent_norm3, geom = 'line', alpha = 0.2, size = 1, aes(color = "deepskyblue2"), span = 0.2, se = FALSE) +
  geom_jitter(data = excurrent_norm3, shape= 17, alpha = 0.2, aes(color = "deepskyblue2")) +
  
  ggtitle(plot_title) + #'[ Change ]
  theme(plot.title = element_text(hjust = 0.5)) +
  xlab("Time [min]") +
  scale_x_continuous(breaks = seq(round_any(min(incurrent_norm$time_addition), 10),
                                  round_any(max(incurrent_norm$time_addition), 10), 
                                  by = 20)) +
  ylab("Normalized Area") +
  ylim(-0.25, 1.25) +
  scale_color_identity(name = "Canals", 
                       breaks = c("deepskyblue4", "chocolate4"),
                       labels = c("Excurrent mean", "Incurrent mean"),  
                       guide = "legend") +  
  geom_vline(xintercept = 0,  
             linetype = "dashed", 
             color = "grey25",
             size = 0.9) +
  geom_text(aes(x = 0, label = "(1) addition", y = 1.25), 
            colour = "grey25", 
            hjust = 1.1, 
            text = element_text(size = 11)) +
  geom_vline(xintercept = (compound2_add+compound2_add2+compound2_add3)/3, # mean of the compound addition times 
             linetype = "dashed", 
             color = "grey25",
             size = 0.9) +
  geom_text(aes(x = (compound2_add+compound2_add2+compound2_add3)/3, label = "(2) addition", y = 1.25), 
            colour = "grey25", 
            hjust = 1.1, 
            text = element_text(size = 11))

ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Mean_Triplicate.pdf",
       width = 20, 
       height = 10,
       units = "cm")

ggsave("Plot_Incurrent-Excurrent-Canals_x-Time_y-Normalise-Area_Mean_Triplicate.jpeg",
       width = 20, 
       height = 10,
       units = "cm")

print(plot_final)
```
